import "@cadl-lang/rest";

using Cadl.Http;

@route("/v1")
@tag("Display")
namespace Display {
  @doc("Create a kiosk. This enrolls the kiosk for sign display.")
  @route("kiosks")
  @post
  op CreateKiosk(@body body: Kiosk): Kiosk | RpcStatus;

  @doc("List active kiosks.")
  @route("kiosks")
  op ListKiosks(...Empty): ListKiosksResponse | RpcStatus;

  @doc("Get a kiosk.")
  @route("kiosks/{id}")
  op GetKiosk(@path id: KioskId): Kiosk | RpcStatus;

  @doc("Delete a kiosk.")
  @route("kiosks/{id}")
  @delete
  op DeleteKiosk(@path id: KioskId): Empty | RpcStatus;

  @doc("Create a sign. This enrolls the sign for sign display.")
  @route("signs")
  @post
  op CreateSign(@body sign: Sign): Sign | RpcStatus;

  @doc("List active signs.")
  @route("signs")
  op ListSigns(...Empty): ListSignsResponse;

  @doc("Get a sign.")
  @route("signs/{id}")
  op GetSign(@path id: SignId): Sign | RpcStatus;

  @doc("Delete a sign.")
  @route("signs/{id}")
  @delete
  op DeleteSign(@path id: SignId): Empty | RpcStatus;

  @doc("Set a sign for display on one or more kiosks.")
  @route("signs/{sign_id}")
  @post
  op SetSignIdForKioskIds(...SetSignIdForKioskIdsRequest): Empty | RpcStatus;

  @doc("Get the sign that should be displayed on a kiosk.")
  @route("kiosks/{kiosk_id}/sign")
  op GetSignIdForKioskId(@path kiosk_id: int32): GetSignIdResponse | RpcStatus;

  //
  // TODO[JC]: Streaming ?
  //@doc("Get signs that should be displayed on a kiosk. Streams.")
  //op GetSignIdsForKioskId(... GetSignIdForKioskIdRequest): @streaming GetSignIdResponse;
  //
}

@doc("Describes a hardware device that can display signs.")
model Kiosk {
  @doc("unique id")
  id?: int32; // Output only.

  @doc("name of device hardware")
  name: string;

  @doc("screen size")
  size: ScreenSize;

  @doc("kiosk location")
  location: LatLng;
  create_time?: Timestamp; // Output only.
}

@doc("""
Describes a digital sign.
Signs can include text, images, or both.
""")
model Sign {
  @doc("unique id")
  id?: int32; // Output only.

  @doc("name of sign")
  name: string;

  @doc("text to display")
  text: string;

  @doc("image to display")
  image: bytes;
}

@doc("Represents the size of a screen in pixels.")
model ScreenSize {
  width: int32;
  height: int32;
}

@doc("A successful response.")
model ListKiosksResponse {
  kiosks?: Kiosk[];
}

@doc("A successful response.")
model ListSignsResponse {
  signs?: Sign[];
}

model SetSignIdForKioskIdsRequest {
  kiosk_ids: int32[];

  @path
  sign_id: int32;
}

model GetSignIdForKioskIdRequest {
  @path
  kiosk_id: int32;
}

@doc("A successful response.")
model GetSignIdResponse {
  sign_id?: int32;
}

alias KioskId = int32;

alias SignId = int32;
